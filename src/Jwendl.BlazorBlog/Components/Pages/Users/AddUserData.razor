@using Jwendl.BlazorBlog.Data
@using Jwendl.BlazorBlog.Data.Blog
@using Jwendl.BlazorBlog.Data.Blog.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@inject AuthenticationStateProvider _authenticationStateProvider
@inject IDbContextFactory<BlogContext> _dbContextFactory
@inject UserManager<IdentityUser> _userManager
@inject NavigationManager _navigationManager

@attribute [Authorize]

@code {
	protected override async Task OnInitializedAsync()
	{
		var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
		var claimsPrincipal = authState.User;

		if (claimsPrincipal != null && claimsPrincipal.Identity != null && claimsPrincipal.Identity.IsAuthenticated)
		{
			var user = await _userManager.FindByNameAsync(claimsPrincipal.Identity.Name!);
			using var blogContext = await _dbContextFactory.CreateDbContextAsync();

			var objectIdClaim = claimsPrincipal.Claims.Where(c => c.Type.Contains("ObjectId")).FirstOrDefault();
			var existingUser = blogContext.Users.SingleOrDefault(u => u.ObjectId == Guid.Parse(objectIdClaim!.Value));
			if (existingUser == null)
			{
				var blogUser = new User()
					{
						ObjectId = Guid.Parse(objectIdClaim!.Value),
						UserPrincipalName = user!.UserName!,
					};
			}

			_navigationManager.NavigateTo("/MicrosoftIdentity/Account/SignIn");
		}
	}
}
