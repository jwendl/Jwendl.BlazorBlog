@page "/user/account/login"

@using Jwendl.BlazorBlog.Components.User.Account.Models
@using Jwendl.BlazorBlog.Components.User.Identity
@using Jwendl.BlazorBlog.Data.Identity.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.Identity;
@using Microsoft.Extensions.Primitives

@inject NavigationManager NavigationManager
@inject IdentityRedirectManager IdentityRedirectManager
@inject SignInManager<ApplicationUser> SignInManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory

<MudForm @ref="@mudForm">
	<MudGrid>
		<MudItem md="4">
			<MudStack AlignItems="AlignItems.Start" Justify="Justify.Center">
				<MudButton Class="d-flex justify-start" Href="/MicrosoftIdentity/Account/SignIn" StartIcon="@Icons.Custom.Brands.MicrosoftAzure" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true">Microsoft Entra</MudButton>
				@foreach (var externalProvider in externalProviders)
				{
					<MudButton Class="d-flex justify-start" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@BuildIconName(externalProvider.Name)" OnClick="@(() => RedirectToChallenge(externalProvider.Name, "/"))" Size="Size.Large" FullWidth="true">@externalProvider.DisplayName</MudButton>
				}
			</MudStack>
		</MudItem>
	</MudGrid>
</MudForm>


@code {
	MudForm mudForm = new();
	AuthenticationScheme[] externalProviders = [];

	async Task RedirectToChallenge(string providerName, string redirectUrl)
	{
		var httpClient = HttpClientFactory.CreateClient();
		var callbackUrl = NavigationManager.BaseUri;
		callbackUrl = $"{callbackUrl}account/external/challenge";
		var challengeModel = new ChallengeInput()
			{
				ExternalProviderName = providerName,
				RedirectUrl = redirectUrl,
			};

		var httpResponse = await httpClient.PostAsJsonAsync<ChallengeInput>(callbackUrl, challengeModel);
		if (httpResponse != null && httpResponse.RequestMessage != null && httpResponse.RequestMessage.RequestUri != null)
		{
			NavigationManager.NavigateTo(httpResponse.RequestMessage.RequestUri.ToString());
		}
	}

	string BuildIconName(string externalLoginName)
	{
		switch (externalLoginName)
		{
			case "Microsoft":
				return Icons.Custom.Brands.Microsoft;
		}

		return Icons.Material.Filled.QuestionMark;
	}

	protected override async Task OnInitializedAsync()
	{
		externalProviders = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
	}
}
