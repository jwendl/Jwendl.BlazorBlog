@page "/user/account/login"

@using Jwendl.BlazorBlog.Components.User.Identity
@using Jwendl.BlazorBlog.Data.Identity.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.Identity;
@using Microsoft.Extensions.Primitives

@inject NavigationManager navigationManager
@inject IdentityRedirectManager identityRedirectManager
@inject SignInManager<ApplicationUser> signInManager

<MudGrid>
	<MudItem md="4">
		<MudStack AlignItems="AlignItems.Start" Justify="Justify.Center">
			<MudButton Class="d-flex justify-start" Href="/MicrosoftIdentity/Account/SignIn" StartIcon="@Icons.Custom.Brands.MicrosoftAzure" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true">Microsoft Entra</MudButton>
			@foreach (var externalProvider in externalProviders)
			{
				<MudButton Class="d-flex justify-start" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@BuildIconName(externalProvider.Name)" OnClick="@(() => PerformExternalLogin(externalProvider.Name))" Size="Size.Large" FullWidth="true">@externalProvider.DisplayName</MudButton>
			}
		</MudStack>
	</MudItem>
</MudGrid>

@code {
	MudForm mudForm = new();
	AuthenticationScheme[] externalProviders = [];

	void PerformExternalLogin(string externalProviderName)
	{
		navigationManager.NavigateTo($"/account/external/challenge?provider={externalProviderName}&returnUrl={navigationManager.Uri}");
	}

	string BuildIconName(string externalLoginName)
	{
		switch (externalLoginName)
		{
			case "Microsoft":
				return Icons.Custom.Brands.Microsoft;
		}

		return Icons.Material.Filled.QuestionMark;
	}

	protected override async Task OnInitializedAsync()
	{
		externalProviders = (await signInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
	}
}
